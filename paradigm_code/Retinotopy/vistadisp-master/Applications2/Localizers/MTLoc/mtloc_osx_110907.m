function mtloc_osx(varargin);% mtloc([subjID, acq]): MT localizer, AB design%% This presents concentric circles, with alternating blocks of static image and% radial (in+out) motion. % % ras, 02/04: automatically detects external monitor if connected. Also, fixed a timing bug.% ras, 06/04: apparently the monitor needs to be set to Millions of colors for it to % work properly. Kalanit claims this must be true for all monitors accessed by screen, % though I doubt it. At any rate, I'll change it to automatically set this in the future...% sungjin, 07/2007: modified for osx, restructured% sungjin, 8/10/2007: added fixation task (code is a bit messy), to turn% off the fixation task, set fixationTaskIsOn = zeroclear Screen;try    for i = 1:2:length(varargin)        switch lower(varargin{i})            case 'nblock', nBlock = varargin{i+1};            case 'secsperblock', secsPerBlock = varargin{i+1};            case 'repeat',  nRepeat = varargin{i+1};            case 'fixsize', fixSize = varargin{i+1}         end    end    %% defaults    if ~exist('subjID','var') subjID = 'test'; end    if ~exist('acq','var') acq = 1; end    if ~exist('nBlock','var'); nBlock = 13; end    if ~exist('secsPerBlock','var'); secsPerBlock = 16; end    if ~exist('nRepeat','var'); nRepeat = 16; end    if ~exist('fixSize','var'); fixSize = 7; end     warning('off','MATLAB:dispatcher:InexactMatch');        % set up environment	AssertOpenGL;        % change screen resolution    changeScreenRes(800,500); % 800/500==1440/900==1.6		% open the external monitor if you have it    screens = screen('Screens');	screennumber = max(screens);	fprintf(1, 'Using screen %d\n', screennumber);		w = screen('OpenWindow', screennumber, 0, [], 32, 2);	screen('FillRect', w, 127);	screen('Flip',w);	rect = screen('Rect',w);	X = rect(3); Y = rect(4); %screen resolution    expDir = fileparts( which(mfilename) );    cd(expDir);    HideCursor;    Priority(9);    % main params    %nBlock = 13; %i.e. 6 cycles of "still-motion" plus still at end    nCircle = 40; % # concentric circles    %secsPerBlock = 16;       nRepeat = 16; % # "outward-inward" movement    secsPerPeriod = secsPerBlock / nRepeat;      % stimulus params    cDiff = 20; % contrast difference from 127 (127-cDiff & 127+cDiff)    stimSize = 400; % outer circle diameter    width = floor(stimSize/2/nCircle); % width of each concentric ring        % fixation task related params    fixationTaskIsOn = 0;    if fixationTaskIsOn        stim.answer = []; stim.correct = []; stim.whichKey = []; stim.responseIndex = [];        stim.RT = [];        nextFixationTask = 0;        trial = 0;        CorrAns = [];        minInterval = 2; maxInterval = 3;        blinkDur = .25; % in seconds        responseHit = 0; responseMiss = 0;        responseFA = 0; responseCR = 0;        trialcheck = -1;        stim.responseKeys = [1:300];        keydowncheck = zeros(1,500);        responseTime = [];        responseKey = [];        t1 = GetSecs;        task = 'red'; % what kind of fixation task?        keyForYes = 44; % laptop spacebar                % Lucas 3T external keypads        % (recommended to use the right: left keypad button 5 sometimes stuck)        % if use left keypad, don't forget to change var "keyForYes"        responseKeysButtonbox = [33 32 31 30 34]; % right external keypad keycodes for 1 2 3 4 5        %     responseKeysButtonbox = [38 37 36 35 39]; % left external keypad        %     keycodes for 1 2 3 4 5    else        responseKeysButtonbox = [];    end        % make stimuli: concentric circles    for i = 1:width        STIM(i) = screen('OpenOffscreenWindow', w, 127);        cSign = 1;        for j = 1:nCircle            circleD = stimSize - j * 2 * width + i; % circle diameter            screen('FillOval', STIM(i), 127 + (cSign * cDiff), CenterRect([0 0 circleD circleD], rect) );            cSign = cSign * -1;        end        PutFixationDot_osx(STIM(i),rect,fixSize,0);    end        for i = 1:width        STIM(width+i) = screen('OpenOffscreenWindow', w, 127);        cSign = -1;        for j = 1:nCircle            circleD = stimSize - j * 2 * width + i;            screen('FillOval', STIM(width+i), 127 + (cSign * cDiff), CenterRect([0 0 circleD circleD], rect) );            cSign = cSign * -1;        end        %PutFixationDot_osx(STIM(width+i),rect,fixSize,0);    end	% front screen    msg = {'MT Localizer'; 'Fixate'};	frontScreen_osx(w, msg, rect, 8, 8, fixSize);	[status time0] = StartScan;    if status==0 % if scanner started        stim.responseKeys = responseKeysButtonbox;        keyForYes = 34; % 3T button box 5    end        %     % detecting devices%     if PsychHID('NumDevices')==6%         % button box not connected (laptop internal keyboard: 6)%         deviceNum = 6; deviceNumLaptop = 6;%     elseif PsychHID('NumDevices')==12%         % button box connected (button box: 3, laptop keyboard: 8)%         deviceNum = 3; deviceNumLaptop = 12;%     end    	countDown2_osx(w, 8, rect, fixSize);    frameOrder = [1:width*2 1:width*2 2*width-1:-1:1 2*width:-1:1];    secsPerFrame = secsPerPeriod / length(frameOrder);        % setup    exitFlag = 0;        %% go     fprintf('Start, Elapsed Time: %3.3f\n', GetSecs - time0);    if fixationTaskIsOn        nBlinkFrames = ceil(blinkDur/secsPerFrame); blinkFrChk = 0;        for block = 1:nBlock            if mod(block, 2) == 0 % moving block                blockStart = GetSecs;                for j = 1:nRepeat                    for k = 1:length(frameOrder)                        screen('CopyWindow', STIM(frameOrder(k)), w, [], [], 'srcCopyQuickly');                        PutFixationDot_osx(w,rect,fixSize,0);                        timeStamp = GetSecs;                        if (timeStamp > nextFixationTask)                            blinkFrChk = blinkFrChk + 1;                            if blinkFrChk==1                                [answer col] = putFixationDot_osx(w,rect,fixSize,1,'color',[255 0 0],'keyForYes',keyForYes);                            else                                answer = putFixationDot_osx(w,rect,fixSize,1,'color',col,'keyForYes',keyForYes);                            end                            if blinkFrChk==nBlinkFrames                                trial = trial + 1;                                CorrAns(trial) = answer;                                fixationOnsetTime = GetSecs;                                nextFixationTask = fixationOnsetTime + tmpInterval;                                blinkFrChk = 0;                            end                        end                        screen('Flip', w, secsPerFrame * k + blockStart + secsPerPeriod * (j-1) );                        % fixation task                        if strcmp(task,'red')                                            [keyisdown, secs, keycode] = KbCheck;                            if keyisdown                                responseTime(trial) = GetSecs - fixationOnsetTime;                                if keycode(41)==1                                    % laptop ESC key pressed (41)                                    exitFlag = 1; break;                                else                                    % parse the response to the fixation task                                    tmp = find(keycode);                                    stim.whichKey(trial) = tmp(1);                                    test = find(ismember(stim.responseKeys,stim.whichKey(trial)));                                    if ~isempty(test)                                        stim.responseIndex(trial) = test(end);                                        responseKey = stim.whichKey(trial);                                    else                                        stim.responseIndex(trial) = 0;                                    end                                    stim.correct(trial) = (stim.responseIndex(trial)==answer);                                    stim.answer(trial) = answer;                                    if keydowncheck(trial)==99                                        trialcheck = -1;%                                         if CorrAns(trial)~=keyForYes;%                                             responseCR = responseCR - 1;%                                         else                                            responseMiss = responseMiss - 1;%                                         end                                        keydowncheck(trial) = 0;                                    end                                    if trialcheck~=trial                                        trialcheck = trial;                                        if responseKey==keyForYes                                            responseHit = responseHit + 1;                                        else                                            responseMiss = responseMiss + 1;                                        end                                    end                                                                    end                            else                                if trialcheck~=trial                                    keydowncheck(trial) = 99;                                    trialcheck = trial;%                                     if CorrAns(trial)~=keyForYes;%                                         responseCR = responseCR + 1;%                                     else                                        responseMiss = responseMiss + 1;%                                     end                                end                            end %% if keyisdown                        end %if strcmp(task,'red')%                         if strcmp(task,'redblue')%                             [keyisdown, secs, keycode] = kbcheck;%                             if keyisdown%                                 responseTime(trial) = GetSecs - fixationOnsetTime;%                                 if keycode(41)==1%                                     % ESC key pressed (41)%                                     exitFlag = 1; break;%                                 else%                                     % parse the response to the fixation task%                                     tmp = find(keycode);%                                     stim.whichKey(trial)  = tmp(1);%                                     test = find(ismember(stim.responseKeys,stim.whichKey(trial)));%                                     if ~isempty(test)%                                         stim.responseIndex(trial) = test(end);%                                     else%                                         stim.responseIndex(trial) = 0;%                                     end%                                     stim.correct(trial) = (stim.responseIndex(trial)==CorrAns(trial));%                                     stim.answer(trial) = CorrAns(trial);%                                 end% %                             end %% if keyisdown% %                         end %% task=='redblue'                    end                    if exitFlag, break; end                end                fprintf('Block %i ends, Elapsed Time: %3.3f\n', block, GetSecs - time0);            else % static block                blockStart = GetSecs;                elapsedTime = 0;                while elapsedTime < secsPerBlock                    elapsedTime = GetSecs - blockStart;                    timeStamp = GetSecs;                    if (timeStamp > nextFixationTask) | (trial == 0)                        screen('CopyWindow', STIM(1), w, [], [], 'srcCopyQuickly');                        answer = putFixationDot_osx(w,rect,fixSize,1,'color',[255 0 0],'keyForYes',keyForYes);                        trial = trial + 1;                        CorrAns(trial) = answer;                        tmpInterval = ceil(rand*((maxInterval-minInterval)*2+1) + 2*minInterval - 1) / 2;                        fixationOnsetTime = GetSecs;                        nextFixationTask = fixationOnsetTime + tmpInterval;                        screen('Flip', w);                        tmpTime1 = GetSecs;                        screen('CopyWindow', STIM(1), w, [], [], 'srcCopyQuickly');                        screen('Flip', w, tmpTime1 + blinkDur);                    end                    % fixation task                    if strcmp(task,'red')                                        [keyisdown, secs, keycode] = KbCheck;                        if keyisdown                            responseTime(trial) = GetSecs - fixationOnsetTime;                            if keycode(41)==1                                % laptop ESC key pressed (41)                                exitFlag = 1; break;                            else                                % parse the response to the fixation task                                tmp = find(keycode);                                stim.whichKey(trial)  = tmp(1);                                test = find(ismember(stim.responseKeys,stim.whichKey(trial)));                                if ~isempty(test)                                    stim.responseIndex(trial) = test(end);                                    responseKey = stim.whichKey(trial);                                else                                    stim.responseIndex(trial) = 0;                                end                                if keydowncheck(trial)==99                                    trialcheck = -1;%                                     if CorrAns(trial)~=keyForYes;%                                         responseCR = responseCR - 1;%                                     else                                        responseMiss = responseMiss - 1;%                                     end                                    keydowncheck(trial) = 0;                                end                                if trialcheck~=trial                                    trialcheck = trial;                                    if responseKey==keyForYes                                        responseHit = responseHit + 1;                                    else                                        responseMiss = responseMiss + 1;                                    end                                end                                                            end                        else                            if trialcheck~=trial                                keydowncheck(trial) = 99;                                trialcheck = trial;%                                 if CorrAns(trial)~=keyForYes;%                                     responseCR = responseCR + 1;%                                 else                                    responseMiss = responseMiss + 1;%                                 end                            end                        end %% if keyisdown                    end %if strcmp(task,'red')%                     if strcmp(task,'redblue')%                         [keyisdown, secs, keycode] = KbCheck;%                         if keyisdown%                             responseTime(trial) = GetSecs - fixationOnsetTime;%                             if keycode(41)==1%                                 % ESC key pressed (41)%                                 exitFlag = 1; break;%                             else%                                 % parse the response to the fixation task%                                 tmp = find(keycode);%                                 stim.whichKey(trial)  = tmp(1);%                                 test = find(ismember(stim.responseKeys,stim.whichKey(trial)));%                                 if ~isempty(test)%                                     stim.responseIndex(trial) = test(end);%                                 else%                                     stim.responseIndex(trial) = 0;%                                 end%                                 stim.correct(trial) = (stim.responseIndex(trial)==CorrAns(trial));%                                 stim.answer(trial) = CorrAns(trial);%                             end% %                         end %% if keyisdown%                     end %% task=='redblue'                end                fprintf('Block %i ends, Elapsed Time: %3.3f\n', block, GetSecs - time0);            end            if exitFlag, break; end        end    end %% if fixation task is ON        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    if fixationTaskIsOn~=1 % if fixation task is off        for block = 1:nBlock            if mod(block, 2) == 0 % moving block                blockStart = GetSecs;                for j = 1:nRepeat                    for k = 1:length(frameOrder)                        screen('CopyWindow', STIM(frameOrder(k)), w, [], [], 'srcCopyQuickly');                        PutFixationDot_osx(w,rect,fixSize,0);                        screen('Flip', w, secsPerFrame * k + blockStart + secsPerPeriod * (j-1) );                        % check for ESC                        [keyisdown, secs, keycode] = KbCheck;                        if keyisdown                            if keycode(41)==1 %ESC                                exitFlag = 1; break;                            end                        end                    end                    if exitFlag, break; end                end                fprintf('Block %i ends, Elapsed Time: %3.3f\n', block, GetSecs - time0);            else                blockStart = GetSecs;                elapsedTime = 0;                screen('CopyWindow', STIM(1), w, [], [], 'srcCopyQuickly');                screen('Flip', w);                while elapsedTime < secsPerBlock                    elapsedTime = GetSecs - blockStart;                    % wait & check for ESC                    [keyisdown, secs, keycode] = KbCheck;                    if keyisdown                        if keycode(41)==1 %ESC                            exitFlag = 1; break;                        end                    end                end                fprintf('Block %i ends, Elapsed Time: %3.3f\n', block, GetSecs - time0);            end            if exitFlag, break; end        end    end%% if fixation task is OFF    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    fprintf('Total time: %3.3fs.\n', GetSecs - time0);    ShowCursor;    Priority(0);        if fixationTaskIsOn        if strcmp(task,'red')            score = round(responseHit/(responseHit+responseMiss)*1000)/10;        end        if strcmp(task,'redblue')            score = round(sum(stim.correct)/length(stim.correct)*1000)/10;        end        screen('TextSize', w, round(Y/20));        screen('DrawText', w, [num2str(score) '%'], round(X/2-X/25), round(Y/2), 255);        screen('DrawText', w, 'SCORE', round(X/2-X/20), round(Y/2-Y/15), 255);        screen('Flip', w);        % stay 5 secs        t1 = GetSecs; elapsedTime = 0;        while elapsedTime < 1            elapsedTime = GetSecs - t1;        end    end        screen('CloseAll');    changeScreenRes(1440,900);    cd([expDir filesep 'results']);    now = clock;    now = [num2str(now(1)) '_' num2str(now(2)) '_' num2str(now(3)) '_' num2str(now(4)) '_' num2str(now(5))];    save([subjID '.' num2str(acq) '.' now '.MTloc.mat']);    cd(expDir);catch    % re-set environment for general use    screen('CloseAll');    Priority(0);    ShowCursor;    changeScreenRes(1440,900);    error(lasterror);    end;return