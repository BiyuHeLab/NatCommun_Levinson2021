function [trial, data] = Perimtrial(display, stimParams,testParams)%Create cmap as function of contrastcmap1= createcmap(display,stimParams.contrast);% make second cmap blank cmap2 = floor(ones(display.numColors,3) * 0.5 * display.maxGunVal);% add reserved colors to the cmap2 againcmap2 = insertReservedCols(display,cmap2);% Back Color % minVal is the lowest available colormap value (excluding reserved colors), maxVal is the highest.  minVal = max([display.reservedColor(:).fbVal])+1;maxVal = display.numColors-1;backColorIndex = (maxVal-minVal)/2+1+minVal; % CREATE IMAGES%% define an empty image   finalimg = ones(display.numPixels(2),display.numPixels(1))*backColorIndex;blankImg=addfixation(testParams.imgfixpoint,testParams.fixloc,finalimg,display);%% CREATE SEQUENCE , THE MOVIE%% the last cMap (# numCmaps) is blank, allowing us to draw invisibly.% number of frames to producestimFrames = round(display.frameRate * stimParams.duration);seq = [-2 1 -1*ones(1,stimFrames) -2 2];% Joining images and bitmap in structurescmap(:,:,1)=cmap1;cmap(:,:,2)=cmap2;%img(:,:,1) = stimParams.image;finalimg=joindispimg(stimParams.image,stimParams.position,display);img(:,:,1)=addfixation(testParams.imgfixpoint,testParams.fixloc,finalimg,display);img(:,:,2) = blankImg;numCmaps=2;%Sequence to index cmaps and imgsseq = [-numCmaps 1 -1*ones(1,stimFrames) -numCmaps 2];% DELETE THIS LINES WHEN LOADCLUT IS USED INSTEAD OF ....% convert 10-bit cmaps to 8-bit cmaps and corresponding gamma tablesif display.cmapDepth == 10	[cmap, gamma] = tenBit2eightBit(display, cmap);end%Modify when use LOADCLUT, no more gamma manipulation in futuredata = createStimulusStruct(img, cmap, seq, gamma);%data = createImagePointersv2(display,  data,stimParams.position);data = createImagePointers(display,data);trial = addTrialEvent(display,[],'stimulusEvent', 'stimulus', data);return;