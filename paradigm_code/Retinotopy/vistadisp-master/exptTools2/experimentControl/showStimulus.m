function [response, timing] = showStimulus(display,stimulus,runPriority,showTiming)%% [response, timing] = showStimulus(display,stimulus,runPriority,showTiming)%%  % HISTORY:% 2005.02.23 RFD: ported from showStimulus.% 2008.05.13 JW: modified to allow timing to be controlled by%                   stimulus.seqtiming if the field exists. % 2009.07.01 RFB:   Added in ability to change input device with%                   stimulus.inputDevice parameter.% 2009.07.02 AMR: added KbQueue capability to work on 3T#2; will also%                   collect responses throughout the length of the frame, %                   even if the frame is very long.  Requires a devices%                   field in display (use getDevices.m) and will collect from external%                   keyboard only.if nargin==0	help(mfilename);endif ~exist('runPriority')	runPriority = 0;  %use the nicest priority by defaultendif ~exist('showTiming')	showTiming = 0;endif ~isfield(stimulus,'textures')	% Generate textures for each image	disp('WARNING: Creating textures before stimulus presentation.');	disp(['         This should be done before calling ' mfilename ' for']);	disp('         accurate timing.  See "makeTextures" for help.');	stimulus = makeTextures(display,stimulus);endif isfield(stimulus,'inputDevice')    custKbCheck = sprintf('KbCheck(%d);',stimulus.inputDevice);else    custKbCheck = 'KbCheck;';endif ~isfield(display,'fixFirst')    display.fixFirst = 0;endif ~isfield(display,'postTrialFix')    display.postTrialFix = 0;endnFrames = length(stimulus.seq);HideCursor;nGamma = size(stimulus.cmap,3);nImages = length(stimulus.textures);response.keyCode = [];response.secs = [];Priority(runPriority);s = GetSecs;if isfield(display,'devices')    % external keyboard (or MRI button box) responses    keylist = ones(1,256);  %keys to record    keylist(KbName('/')) = 0;  % ignore backslashes sent by Lucas 3T#2    keylist(KbName('/?')) = 0;    KbQueueCreate(display.devices.keyInputExternal,keylist);    KbQueueStart();endfor frame = 1:nFrames		if ~isfield(stimulus, 'fixSeq')  || isempty(stimulus.fixSeq),        colindex = 1; else colindex = stimulus.fixSeq(frame);     end        if stimulus.seq(frame)>0        % put in an image        if display.fixFirst==1, drawFixation(display, colindex); end		imgNum = mod(stimulus.seq(frame)-1,nImages)+1;		Screen('DrawTexture', display.windowPtr, stimulus.textures(imgNum), stimulus.srcRect, stimulus.destRect);        if display.fixFirst==0, drawFixation(display, colindex); end        timing = GetSecs - s;        Screen('Flip', display.windowPtr);    elseif stimulus.seq(frame)<0        % put in a color table		gammaNum = mod(-stimulus.seq(frame)-1,nGamma)+1;        drawFixation(display, colindex);        Screen('Flip', display.windowPtr);		Screen('LoadNormalizedGammaTable', display.windowPtr, stimulus.cmap(:,:,gammaNum));    else        % Do nothing, except wait a frame.		Screen('Flip', display.windowPtr);    end    % Scan the keyboard    [keyIsDown,secs,keyCode] = eval(custKbCheck);    if(keyIsDown)        response.keyCode = keyCode;        response.secs = secs;    end        if ~isfield(stimulus, 'seqtiming')  || isempty(stimulus.seqtiming),        %don't wait    else        waitTime = (GetSecs-s)-stimulus.seqtiming(frame);        while(waitTime<0),            % if there is time release cpu            if(waitTime<-0.02),                WaitSecs(0.01);            end;            % timing            waitTime = (GetSecs-s)-stimulus.seqtiming(frame);        end    end     endif isfield(display,'devices')    KbQueueStop();  % stops collection of responses but can still check with KbQueueCheck    [k.pressed, k.firstPress, k.firstRelease, k.lastPress, k.lastRelease]=...        KbQueueCheck();    response.keyCode = KbName(KbName(k.firstPress));  % [] if no response    f = find(k.firstPress);    if k.pressed        response.secs = k.firstPress(f)-s;    else response.secs = 0; end    KbQueueFlush();endtiming = GetSecs-s;if display.postTrialFix==1, drawFixation(display); Screen('Flip',display.windowPtr); endif showTiming	disp(['Stimulus run time: ',num2str(timing),' seconds.']);endPriority(0);