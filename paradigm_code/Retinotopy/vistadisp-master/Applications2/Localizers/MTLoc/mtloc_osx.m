function mtloc_osx(subjID, acq);% mtloc([subjID, acq]): MT localizer, AB design%% This presents concentric circles, with alternating blocks of static image and% radial (in+out) motion.%% ras, 02/04: automatically detects external monitor if connected. Also, fixed a timing bug.% ras, 06/04: apparently the monitor needs to be set to Millions of colors for it to% work properly. Kalanit claims this must be true for all monitors accessed by screen,% though I doubt it. At any rate, I'll change it to automatically set this in the future...% sungjin, 07/2007: modified for osx, restructured% sungjin, 8/10/2007: added fixation task (code is a bit messy), to turn% off the fixation task, set fixationTaskIsOn = zero% (local for bluemoon laptop):% set the path so that this works, but then restore the old path so other% VISTADISP code doesn't run into namespace errors%addpath /Users/Shared/matlab/stimTools_osxclear Screen;try    % defaults    if ~exist('subjID','var') subjID = 'test'; end    if ~exist('acq','var') acq = 1; end        %     addpath(genpath('/Users/kweb/exp/stimTools_osx'));    warning('off','MATLAB:dispatcher:InexactMatch');            % detecting devices    devices = getDevices;    if isfield(devices,'keyInputExternal')        deviceNum = devices.keyInputExternal;    else        deviceNum = devices.keyInputInternal;    end    deviceNumLaptop = devices.keyInputInternal;        %     if PsychHID('NumDevices')==6    %         % button box not connected (laptop internal keyboard: 6)    %         deviceNum = 6; deviceNumLaptop = 6;    %     elseif PsychHID('NumDevices')==12    %         % button box connected (button box: 3, laptop keyboard: 8)    %         deviceNum = 3; deviceNumLaptop = 12;    %     end                % set up environment    AssertOpenGL;        % change screen resolution        % open the external monitor if you have it    screens = screen('Screens');    screennumber = max(screens);    fprintf(1, 'Using screen %d\n', screennumber);        Screen('CloseAll');    oldRes = Screen('Resolution', screennumber);    Screen('Resolution', screennumber, 640, 480);    w = screen('OpenWindow', screennumber, 0, [], 32, 2);    screen('FillRect', w, 127);    screen('Flip',w);    rect = screen('Rect',w);    X = rect(3); Y = rect(4); %screen resolution        expDir = fileparts( which(mfilename) );    cd(expDir);        HideCursor;    Priority(9);        % main params    nBlock = 13; %i.e. 6 cycles of "still-motion" plus still at end    nCircle = 40; % # concentric circles    secsPerBlock = 16;    nRepeat = 16; % # "outward-inward" movement    secsPerPeriod = secsPerBlock / nRepeat;        % stimulus params    cDiff = 20; % contrast difference from 127 (127-cDiff & 127+cDiff)    stimSize = 400; % outer circle diameter    width = floor(stimSize/2/nCircle); % width of each concentric ring    fixSize = Y/90; % fixation dot size (in pixels)        % fixation task related params    fixationTaskIsOn = 1;    if fixationTaskIsOn        stim.answer = []; stim.correct = []; stim.whichKey = []; stim.responseIndex = [];        stim.RT = [];        nextFixationTask = 0;        trial = 0;        CorrAns = [];        minInterval = 2; maxInterval = 3;        blinkDur = .25; % in seconds        responseHit = 0; responseMiss = 0;        responseFA = 0; responseCR = 0;        trialcheck = -1;        stim.responseKeys = [1:300];        keydowncheck = zeros(1,500);        responseTime = [];        responseKey = [];        t1 = GetSecs;        task = 'red'; % what kind of fixation task?        keyForYes = 34;  %33  % 3T#1; %44; % laptop spacebar                % Lucas 3T#1 external keypads        % (recommended to use the right: left keypad button 5 sometimes stuck)        % if use left keypad, don't forget to change var "keyForYes"        responseKeysButtonbox = [33 32 31 30 34]; % right external keypad keycodes for 1 2 3 4 5        %responseKeysButtonbox = [38 37 36 35 39]; % left external keypad        %     keycodes for 1 2 3 4 5    else        responseKeysButtonbox = [];    end        % make stimuli: concentric circles    for i = 1:width        STIM(i) = screen('OpenOffscreenWindow', w, 127);        cSign = 1;        for j = 1:nCircle            circleD = stimSize - j * 2 * width + i; % circle diameter            screen('FillOval', STIM(i), 127 + (cSign * cDiff), CenterRect([0 0 circleD circleD], rect) );            cSign = cSign * -1;        end        PutFixationDot_osx(STIM(i),rect,fixSize,0);    end        for i = 1:width        STIM(width+i) = screen('OpenOffscreenWindow', w, 127);        cSign = -1;        for j = 1:nCircle            circleD = stimSize - j * 2 * width + i;            screen('FillOval', STIM(width+i), 127 + (cSign * cDiff), CenterRect([0 0 circleD circleD], rect) );            cSign = cSign * -1;        end        PutFixationDot_osx(STIM(width+i),rect,fixSize,0);    end        % front screen    msg = {'MT Localizer'; 'Fixate'};    mtloc_frontScreen(w, msg, rect, 8, 8, fixSize);            % Wait for any key press to begin run    keycode = zeros(1,500); keydown = 0;        % [deviceNumLaptop deviceNumButtonbox] = getDeviceNumbers_osx;        while keydown==0        [keydown,temp,keycode] = KbCheck(devices.keyInputInternal);    end            [status time0] = startScan2;    if status==0 % if scanner started        stim.responseKeys = responseKeysButtonbox;        keyForYes = 34; % 3T button box 5    end               countDown2_osx(w, 8, rect, fixSize);        frameOrder = [1:width*2 1:width*2 2*width-1:-1:1 2*width:-1:1];    secsPerFrame = secsPerPeriod / length(frameOrder);        % setup    exitFlag = 0;        %% go    fprintf('Start, Elapsed Time: %3.3f\n', GetSecs - time0);    if fixationTaskIsOn        nBlinkFrames = ceil(blinkDur/secsPerFrame); blinkFrChk = 0;        for block = 1:nBlock            if mod(block, 2) == 0 % moving block                blockStart = GetSecs;                for j = 1:nRepeat                    for k = 1:length(frameOrder)                        screen('CopyWindow', STIM(frameOrder(k)), w, [], [], 'srcCopyQuickly');                        PutFixationDot_osx(w,rect,fixSize,0);                        timeStamp = GetSecs;                        if (timeStamp > nextFixationTask)                            blinkFrChk = blinkFrChk + 1;                            if blinkFrChk==1                                [answer col] = putFixationDot_osx(w,rect,fixSize,1,'color',[255 0 0],'keyForYes',keyForYes);                            else                                answer = putFixationDot_osx(w,rect,fixSize,1,'color',col,'keyForYes',keyForYes);                            end                            if blinkFrChk==nBlinkFrames                                trial = trial + 1;                                CorrAns(trial) = answer;                                fixationOnsetTime = GetSecs;                                nextFixationTask = fixationOnsetTime + tmpInterval;                                blinkFrChk = 0;                            end                        end                        screen('Flip', w, secsPerFrame * k + blockStart + secsPerPeriod * (j-1) );                                                % fixation task                        if strcmp(task,'red')                                                        [keyisdown, secs, keycode] = KbCheck;                                                        if keyisdown && ~strcmp(KbName(keycode),'/')  % ignore slashes from 3T#2                                responseTime(trial) = GetSecs - fixationOnsetTime;                                if keycode(41)==1                                    % laptop ESC key pressed (41)                                    exitFlag = 1; break;                                else                                    % parse the response to the fixation task                                    tmp = find(keycode);                                    stim.whichKey(trial) = tmp(1);                                    test = find(ismember(stim.responseKeys,stim.whichKey(trial)));                                    if ~isempty(test)                                        stim.responseIndex(trial) = test(end);                                        responseKey = stim.whichKey(trial);                                    else                                        stim.responseIndex(trial) = 0;                                    end                                    stim.correct(trial) = (stim.responseIndex(trial)==answer);                                    stim.answer(trial) = answer;                                                                        if keydowncheck(trial)==99                                        trialcheck = -1;                                        %                                         if CorrAns(trial)~=keyForYes;                                        %                                             responseCR = responseCR - 1;                                        %                                         else                                        responseMiss = responseMiss - 1;                                        %                                         end                                        keydowncheck(trial) = 0;                                    end                                                                        if trialcheck~=trial                                        trialcheck = trial;                                        if responseKey==keyForYes                                            responseHit = responseHit + 1;                                        else                                            responseMiss = responseMiss + 1;                                        end                                    end                                                                    end                            else                                if trialcheck~=trial                                    keydowncheck(trial) = 99;                                    trialcheck = trial;                                    %                                     if CorrAns(trial)~=keyForYes;                                    %                                         responseCR = responseCR + 1;                                    %                                     else                                    responseMiss = responseMiss + 1;                                    %                                     end                                end                            end %% if keyisdown                        end %if strcmp(task,'red')                                                if strcmp(task,'redblue')                            [keyisdown, secs, keycode] = kbcheck;                            if keyisdown                                responseTime(trial) = GetSecs - fixationOnsetTime;                                if keycode(41)==1                                    % ESC key pressed (41)                                    exitFlag = 1; break;                                else                                    % parse the response to the fixation task                                    tmp = find(keycode);                                    stim.whichKey(trial)  = tmp(1);                                    test = find(ismember(stim.responseKeys,stim.whichKey(trial)));                                    if ~isempty(test)                                        stim.responseIndex(trial) = test(end);                                    else                                        stim.responseIndex(trial) = 0;                                    end                                    stim.correct(trial) = (stim.responseIndex(trial)==CorrAns(trial));                                    stim.answer(trial) = CorrAns(trial);                                end                                                            end %% if keyisdown                                                    end %% task=='redblue'                        end                        if exitFlag, break; end                    end                    fprintf('Block %i ends, Elapsed Time: %3.3f\n', block, GetSecs - time0);                    else % static block                        blockStart = GetSecs;                        elapsedTime = 0;                        while elapsedTime < secsPerBlock                            elapsedTime = GetSecs - blockStart;                            timeStamp = GetSecs;                            if (timeStamp > nextFixationTask) | (trial == 0)                                screen('CopyWindow', STIM(1), w, [], [], 'srcCopyQuickly');                                answer = putFixationDot_osx(w,rect,fixSize,1,'color',[255 0 0],'keyForYes',keyForYes);                                trial = trial + 1;                                CorrAns(trial) = answer;                                tmpInterval = ceil(rand*((maxInterval-minInterval)*2+1) + 2*minInterval - 1) / 2;                                fixationOnsetTime = GetSecs;                                nextFixationTask = fixationOnsetTime + tmpInterval;                                screen('Flip', w);                                tmpTime1 = GetSecs;                                screen('CopyWindow', STIM(1), w, [], [], 'srcCopyQuickly');                                screen('Flip', w, tmpTime1 + blinkDur);                            end                                                        % fixation task                            if strcmp(task,'red')                                                                [keyisdown, secs, keycode] = KbCheck;                                                                if keyisdown && ~strcmp(KbName(keycode),'/')  % ignore slashes from 3T#2                                    responseTime(trial) = GetSecs - fixationOnsetTime;                                    if keycode(41)==1                                        % laptop ESC key pressed (41)                                        exitFlag = 1; break;                                    else                                        % parse the response to the fixation task                                        tmp = find(keycode);                                        stim.whichKey(trial)  = tmp(1);                                        test = find(ismember(stim.responseKeys,stim.whichKey(trial)));                                        if ~isempty(test)                                            stim.responseIndex(trial) = test(end);                                            responseKey = stim.whichKey(trial);                                        else                                            stim.responseIndex(trial) = 0;                                        end                                                                                if keydowncheck(trial)==99                                            trialcheck = -1;                                            %                                     if CorrAns(trial)~=keyForYes;                                            %                                         responseCR = responseCR - 1;                                            %                                     else                                            responseMiss = responseMiss - 1;                                            %                                     end                                            keydowncheck(trial) = 0;                                        end                                                                                if trialcheck~=trial                                            trialcheck = trial;                                            if responseKey==keyForYes                                                responseHit = responseHit + 1;                                            else                                                responseMiss = responseMiss + 1;                                            end                                        end                                                                            end                                else                                    if trialcheck~=trial                                        keydowncheck(trial) = 99;                                        trialcheck = trial;                                        %                                 if CorrAns(trial)~=keyForYes;                                        %                                     responseCR = responseCR + 1;                                        %                                 else                                        responseMiss = responseMiss + 1;                                        %                                 end                                    end                                end %% if keyisdown                            end %if strcmp(task,'red')                                                                            if strcmp(task,'redblue')                                                    [keyisdown, secs, keycode] = KbCheck;                                                    if keyisdown                                                        responseTime(trial) = GetSecs - fixationOnsetTime;                                                        if keycode(41)==1                                                            % ESC key pressed (41)                                                            exitFlag = 1; break;                                                        else                                                            % parse the response to the fixation task                                                            tmp = find(keycode);                                                            stim.whichKey(trial)  = tmp(1);                                                            test = find(ismember(stim.responseKeys,stim.whichKey(trial)));                                                            if ~isempty(test)                                                                stim.responseIndex(trial) = test(end);                                                            else                                                                stim.responseIndex(trial) = 0;                                                            end                                                            stim.correct(trial) = (stim.responseIndex(trial)==CorrAns(trial));                                                            stim.answer(trial) = CorrAns(trial);                                                        end                                                                                end %% if keyisdown                                                end %% task=='redblue'                                                    end                        fprintf('Block %i ends, Elapsed Time: %3.3f\n', block, GetSecs - time0);                end                if exitFlag, break; end            end        end %% if fixation task is ON                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        if fixationTaskIsOn~=1 % if fixation task is off            for block = 1:nBlock                if mod(block, 2) == 0 % moving block                    blockStart = GetSecs;                    for j = 1:nRepeat                        for k = 1:length(frameOrder)                            screen('CopyWindow', STIM(frameOrder(k)), w, [], [], 'srcCopyQuickly');                            PutFixationDot_osx(w,rect,fixSize,0);                            screen('Flip', w, secsPerFrame * k + blockStart + secsPerPeriod * (j-1) );                            % check for ESC                            [keyisdown, secs, keycode] = KbCheck;                            if keyisdown                                if keycode(41)==1 %ESC                                    exitFlag = 1; break;                                end                            end                        end                        if exitFlag, break; end                    end                    fprintf('Block %i ends, Elapsed Time: %3.3f\n', block, GetSecs - time0);                else                    blockStart = GetSecs;                    elapsedTime = 0;                    screen('CopyWindow', STIM(1), w, [], [], 'srcCopyQuickly');                    screen('Flip', w);                    while elapsedTime < secsPerBlock                        elapsedTime = GetSecs - blockStart;                        % wait & check for ESC                        [keyisdown, secs, keycode] = KbCheck;                        if keyisdown                            if keycode(41)==1 %ESC                                exitFlag = 1; break;                            end                        end                    end                    fprintf('Block %i ends, Elapsed Time: %3.3f\n', block, GetSecs - time0);                end                if exitFlag, break; end            end        end%% if fixation task is OFF        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%                fprintf('Total time: %3.3fs.\n', GetSecs - time0);        ShowCursor;        Priority(0);                if fixationTaskIsOn            if strcmp(task,'red')                score = round(responseHit/(responseHit+responseMiss)*1000)/10;            end            if strcmp(task,'redblue')                score = round(sum(stim.correct)/length(stim.correct)*1000)/10;            end            screen('TextSize', w, round(Y/20));            screen('DrawText', w, [num2str(score) '%'], round(X/2-X/25), round(Y/2), 255);            screen('DrawText', w, 'SCORE', round(X/2-X/20), round(Y/2-Y/15), 255);            screen('Flip', w);                        % stay 5 secs            t1 = GetSecs; elapsedTime = 0;            while elapsedTime < 1                elapsedTime = GetSecs - t1;            end        end                screen('CloseAll');        Screen('Resolution', screennumber, oldRes.width, oldRes.height);        %     changeScreenRes(1440,900);        rmpath(genpath('/Users/kweb/exp/stimTools_osx'));        cd([expDir filesep 'results']);        now = clock;        now = [num2str(now(1)) '_' num2str(now(2)) '_' num2str(now(3))];        save([subjID '.' num2str(acq) '.' now '.MTloc.mat']);        cd(expDir);                catch            % re-set environment for general use            screen('CloseAll');            Priority(0);            ShowCursor;            %     Screen('Resolution', max(Screen('Screens')), oldRes.width, oldRes.height);            %     changeScreenRes(1440,900);            error(lasterror);                end;        % remove the dependency code from the path    % rmpath /Users/Shared/matlab/stimTools_osx    return    % /--------------------------------------------------/ %                % /--------------------------------------------------/ %    function mtloc_frontScreen(w,message,rect,countDownTime,triggerTime,fixSize);    % put up a front-end screen with the task, and wait for the    % subject/experimenter to press any key to continue    %    % frontScreen: present a front screen for an experiment    %    % Usage: mtloc_frontScreen(w,message,rect,countDownTime,triggerTime,fixSize);    %    %    % written 1/14/03 by ras    % modified for osx 10/06 sungjin    % get responses from either 3T buttonbox or keyboard, 9/18/07 sungjin    if ~iscell(message)        message= {message};    end        %%%%% parameters %%%%%%%%%%%%%%%%%%    X = rect(3); Y = rect(4);    textColor = 225;	% color in lookup table for textColor    backgnd = 127;		% color in lookup table for background    lineHeight = Y/15;		% size in pixels for each line    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        %scratch = screen('OpenOffScreenWindow',w);    %screen('TextSize', w, round(Y/30));    screen('FillRect', w, backgnd);    screen('Flip', w);        numLines = length(message);    yStart = round(Y/2 - lineHeight*(numLines-1)/2);    yEnd = round(Y/2 + lineHeight*(numLines-1)/2);    yVals = yStart:lineHeight:yEnd;        screen('TextSize', w, round(Y/20));    for lineNum = 1:numLines        %newX = screen('DrawText',w,message{lineNum},0,0,textColor);        xPos = round(X/2-length(message{lineNum})/2*Y/40);        yPos = yVals(lineNum);        screen('DrawText', w, message{lineNum}, xPos, yPos, textColor);    end    screen('Flip', w);        ScreenNum = screen('WindowScreenNumber', w);    if ScreenNum > 0	% if presenting on a screen other than first screen        disp('Press any key to begin experiment...');    end        % Wait for any key press to begin run    %keycode = zeros(1,500); keydown = 0;        % [deviceNumLaptop deviceNumButtonbox] = getDeviceNumbers_osx;    %     while keydown==0%         [keydown,temp,keycode] = KbCheck;%     end            return